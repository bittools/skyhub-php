<?php
/**
 * B2W Digital - Companhia Digital
 *
 * Do not edit this file if you want to update this SDK for future new versions.
 * For support please contact the e-mail bellow:
 *
 * sdk@e-smart.com.br
 *
 * @category  SkuHub
 * @package   SkuHub
 *
 * @copyright Copyright (c) 2018 B2W Digital - BSeller Platform. (http://www.bseller.com.br).
 *
 * @author    Tiago Sampaio <tiago.sampaio@e-smart.com.br>
 */

namespace SkyHub\Api\EntityInterface\Sales;

use SkyHub\Api\EntityInterface\EntityAbstract;
use SkyHub\Api\Handler\Request\Sales\OrderHandler;

class Order extends EntityAbstract
{
    
    /**
     * @param int   $page
     * @param int   $perPage
     * @param null  $saleSystem
     * @param array $statuses
     *
     * @return \SkyHub\Api\Handler\Response\HandlerInterface
     */
    public function orders($page = 1, $perPage = 30, $saleSystem = null, array $statuses = [])
    {
        /** @var OrderHandler $handler */
        $handler = $this->requestHandler();
        return $handler->orders($page, $perPage, $saleSystem, $statuses);
    }


    /**
     * @param string $orderId
     *
     * @return \SkyHub\Api\Handler\Response\HandlerInterface
     */
    public function order($orderId)
    {
        /** @var OrderHandler $handler */
        $handler = $this->requestHandler();
        return $handler->order($orderId);
    }


    /**
     * @param string $orderId
     * @param string $invoiceKey
     * @param string $status
     *
     * @return \SkyHub\Api\Handler\Response\HandlerInterface
     */
    public function invoice($orderId, $invoiceKey, $status = null)
    {
        /** @var OrderHandler $handler */
        $handler = $this->requestHandler();
        return $handler->invoice($orderId, $invoiceKey, $status);
    }


    /**
     * @param string $orderId
     * @param string $status
     *
     * @return \SkyHub\Api\Handler\Response\HandlerInterface
     */
    public function cancel($orderId, $status = null)
    {
        /** @var OrderHandler $handler */
        $handler = $this->requestHandler();
        return $handler->cancel($orderId, $status);
    }


    /**
     * @param string $orderId
     * @param string $date
     * @param string $status
     *
     * @return \SkyHub\Api\Handler\Response\HandlerInterface
     */
    public function delivery($orderId, $date = null, $status = null)
    {
        /** @var OrderHandler $handler */
        $handler = $this->requestHandler();
        return $handler->delivery($orderId, $date, $status);
    }


    /**
     * @param string $orderId
     *
     * @return \SkyHub\Api\Handler\Response\HandlerInterface
     */
    public function shipmentLabels($orderId)
    {
        /** @var OrderHandler $handler */
        $handler = $this->requestHandler();
        return $handler->shipmentLabels($orderId);
    }


    /**
     * @param string $orderId
     * @param array  $items
     * @param string $trackCode
     * @param string $trackCarrier
     * @param string $trackMethod
     * @param string $trackUrl
     * @param string $status
     *
     * @return \SkyHub\Api\Handler\Response\HandlerInterface
     */
    public function shipment($orderId, array $items, $trackCode, $trackCarrier, $trackMethod, $trackUrl, $status = null)
    {
        /** @var OrderHandler $handler */
        $handler = $this->requestHandler();
        return $handler->shipment($orderId, $items, $trackCode, $trackCarrier, $trackMethod, $trackUrl, $status);
    }
    
    
    /**
     * @param string $orderId
     * @param string $datetime
     * @param string $observation
     * @param string $status
     *
     * @return \SkyHub\Api\Handler\Response\HandlerInterface
     */
    public function shipmentException($orderId, $datetime, $observation, $status = null)
    {
        /** @var OrderHandler $handler */
        $handler = $this->requestHandler();
        return $handler->shipmentException($orderId, $datetime, $observation, $status);
    }

    /**
     * @param string $orderId
     * @param string $volumeQty
     * @param string $issueDate
     * @param string $pathFile
     * @param string $nameFile
     * @param string $status
     * @return \SkyHub\Api\Handler\Response\HandlerInterface
     */
    public function invoiceB2wDirect(
        $orderId,
        $volumeQty,
        $issueDate,
        $pathFile,
        $fileName,
        $status = null
    ) {
        /** @var OrderHandler $handler */
        $handler = $this->requestHandler();
        return $handler->invoiceB2wDirect(
            $orderId,
            $volumeQty,
            $issueDate,
            $pathFile,
            $fileName,
            $status
        );
    }
}
