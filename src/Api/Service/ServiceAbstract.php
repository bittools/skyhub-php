<?php
/**
 * B2W Digital - Companhia Digital
 *
 * Do not edit this file if you want to update this SDK for future new versions.
 * For support please contact the e-mail bellow:
 *
 * sdk@e-smart.com.br
 *
 * @category  SkyHub
 * @package   SkyHub
 *
 * @copyright Copyright (c) 2018 B2W Digital - BSeller Platform. (http://www.bseller.com.br).
 *
 * @author    Tiago Sampaio <tiago.sampaio@e-smart.com.br>
 * @author    Bruno Gemelli <bruno.gemelli@e-smart.com.br>
 */

namespace SkyHub\Api\Service;

use GuzzleHttp\Client as HttpClient;
use GuzzleHttp\Post\PostFile;
use SkyHub\Api;
use SkyHub\Api\Helpers;
use SkyHub\Api\Handler\Response\HandlerDefault;
use SkyHub\Api\Log\Loggerable;
use SkyHub\Api\Log\TypeInterface\Request;
use SkyHub\Api\Log\TypeInterface\Response;
use SkyHub\Api\Handler\Response\HandlerException;

abstract class ServiceAbstract implements ServiceInterface
{
    
    use Loggerable, Helpers;
    
    
    const REQUEST_METHOD_GET    = 'GET';
    const REQUEST_METHOD_POST   = 'POST';
    const REQUEST_METHOD_PUT    = 'PUT';
    const REQUEST_METHOD_HEAD   = 'HEAD';
    const REQUEST_METHOD_DELETE = 'DELETE';
    const REQUEST_METHOD_PATCH  = 'PATCH';
    
    /** @var string */
    const DEFAULT_SERVICE_BASE_URI = 'https://api.skyhub.com.br';

    
    /** @var HttpClient */
    protected $client = null;

    /** @var array */
    protected $headers = [];

    /** @var int */
    protected $timeout = 15;

    /** @var int */
    protected $requestId = null;

    /** @var array */
    protected $files = [];    
    
    /**
     * Service constructor.
     *
     * @param string $baseUri
     * @param array  $headers
     * @param array  $options
     */
    public function __construct($baseUri = null, array $headers = [], array $options = [], $log = true)
    {
        $this->headers = array_merge($this->headers, $headers);
        
        $defaults = [
            'headers' => $headers,
        ];

        if (empty($baseUri)) {
            $baseUri = $this->getDefaultBaseUri();
        }
    
        foreach ($options as $key => $value) {
            $defaults[$key] = $value;
        }
        
        $this->prepareHttpClient($baseUri, $defaults);
    
        return $this;
    }
    
    
    /**
     * Returns the default base URI.
     *
     * @return string
     */
    public function getDefaultBaseUri()
    {
        return self::DEFAULT_SERVICE_BASE_URI;
    }
    
    /**
     * add file to send
     *
     * @param PostFile $file
     * @return void
     */
    public function addPostFile(PostFile $file)
    {
        $this->files[] = $file;
    }
    
    /**
     * @param bool $renew
     *
     * @return int
     */
    public function getRequestId($renew = false)
    {
        if (empty($this->requestId) || $renew) {
            $this->requestId = rand(1000000000000, 9999999999999);
        }
        
        return $this->requestId;
    }
    
    
    /**
     * @param string $method
     * @param string $uri
     * @param null   $body
     * @param array  $options
     *
     * @return Api\Handler\Response\HandlerInterfaceException|Api\Handler\Response\HandlerInterfaceSuccess
     */
    public function request($method, $uri, $body = null, $options = [], $debug = false)
    {
        $options['timeout'] = $this->getTimeout();
        $options['headers'] = $this->headers;
        $options['debug']   = (bool) $debug;
        
        $options = $this->prepareRequestBody($body, $options);
        
        /** Log the request before sending it. */
        $logRequest = new Request(
            $this->getRequestId(),
            $method,
            $uri,
            $body,
            $this->protectedHeaders($this->headers),
            $this->protectedOptions($options)
        );
        
        $this->logger()->logRequest($logRequest);

        try {
            /** @var \GuzzleHttp\Message\Request $request */
            $request = $this->httpClient()->createRequest($method, $uri, $options);

            if ($this->files && $method == self::REQUEST_METHOD_POST) {
                $postBody = $request->getBody();
                foreach($this->files as $file) {
                    $postBody->addFile($file);
                }
            }

            /** @var \GuzzleHttp\Message\Response $response */
            $response = $this->httpClient()->send($request);
    
            /** @var Api\Handler\Response\HandlerInterfaceSuccess $responseHandler */
            $responseHandler = new HandlerDefault($response);
    
            /** Log the request response. */
            $logResponse = $this->getLoggerResponse()->importResponseHandler($responseHandler);
        } catch (\Exception $e) {
            /** @var Api\Handler\Response\HandlerInterfaceException $responseHandler */
            $responseHandler = new HandlerException($e);
            
            /** Log the request response. */
            $logResponse = $this->getLoggerResponse()->importResponseExceptionHandler($responseHandler);
        }

        $this->clear();
        $this->logger()->logResponse($logResponse);
        
        return $responseHandler;
    }


    /**
     * This method clears the unnecessary information after a request.
     *
     * @return $this
     */
    protected function clear()
    {
        $this->clearRequestId();
        return $this;
    }
    
    
    /**
     * @return $this
     */
    protected function clearRequestId()
    {
        $this->requestId = null;
        return $this;
    }

    
    /**
     * @param string|array $bodyData
     * @param array        $options
     *
     * @return array
     */
    protected function prepareRequestBody($bodyData, array &$options = [])
    {
        $options['body'] = $bodyData;
        return $options;
    }
    
    
    /**
     * A private __clone method prevents this class to be cloned by any other class.
     *
     * @return void
     */
    private function __clone()
    {
    }
    
    
    /**
     * A private __wakeup method prevents this object to be unserialized.
     *
     * @return void
     */
    private function __wakeup()
    {
    }
    
    
    /**
     * @return HttpClient
     */
    protected function httpClient()
    {
        return $this->client;
    }
    
    
    /**
     * @param null  $baseUri
     * @param array $defaults
     *
     * @return HttpClient
     */
    protected function prepareHttpClient($baseUri = null, array $defaults = [])
    {
        if (null === $this->client) {
            $this->client = new HttpClient([
                'base_uri' => $baseUri,
                'base_url' => $baseUri,
                'defaults' => $defaults
            ]);
        }
    
        return $this->client;
    }
    
    
    /**
     * @return array
     */
    public function getHeaders()
    {
        return (array) $this->headers;
    }
    
    
    /**
     * @param array $headers
     * @param bool  $append
     * @param bool  $replace
     *
     * @return $this
     */
    public function setHeaders(array $headers = [], $append = true, $replaceExisting = true)
    {
        if (!$append) {
            $this->headers = $headers;
            return $this;
        }
        
        foreach ($headers as $key => $value) {
            /** If the header is already set then check if we can replace the value. */
            if (isset($this->headers[$key]) && (false == $replaceExisting)) {
                continue;
            }
            
            $this->headers[$key] = $value;
        }
        
        return $this;
    }
    
    
    /**
     * @return int
     */
    public function getTimeout()
    {
        return (int) $this->timeout;
    }
    
    
    /**
     * @param integer $timeout
     *
     * @return $this
     */
    public function setTimeout($timeout)
    {
        $this->timeout = (int) $timeout;
        return $this;
    }
    
    
    /**
     * @param $options
     *
     * @return mixed
     */
    protected function protectedOptions($options)
    {
        $headers = $this->arrayExtract($options, 'headers');
        
        if (empty($headers)) {
            return $options;
        }
    
        $headers = $this->protectedHeaders($headers);
        $options['headers'] = $headers;
        
        return $options;
    }
    
    
    /**
     * @return array
     */
    protected function protectedHeaders(array $headers = [])
    {
        if (empty($headers)) {
            $headers = $this->headers;
        }
    
        if (isset($headers[Api::HEADER_USER_EMAIL])) {
            $headers[Api::HEADER_USER_EMAIL] = $this->protectString($headers[Api::HEADER_USER_EMAIL]);
        }
    
        if (isset($headers[Api::HEADER_API_KEY])) {
            $headers[Api::HEADER_API_KEY] = $this->protectString($headers[Api::HEADER_API_KEY]);
        }
    
        if (isset($headers[Api::HEADER_ACCOUNT_MANAGER_KEY])) {
            $headers[Api::HEADER_ACCOUNT_MANAGER_KEY] = $this->protectString($headers[Api::HEADER_ACCOUNT_MANAGER_KEY]);
        }
        
        return $headers;
    }


    /**
     * @return \SkyHub\Api\Log\TypeInterface\TypeResponseInterface
     */
    protected function getLoggerResponse()
    {
        return new Response($this->getRequestId());
    }
}
