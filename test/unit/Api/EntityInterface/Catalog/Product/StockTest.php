<?php

/**
 * BSeller Platform | B2W - Companhia Digital
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @category  SkuHubTest
 * @package   SkuHubTest
 *
 * @copyright Copyright (c) 2021 B2W Digital - BSeller Platform. (http://www.bseller.com.br).
 *
 */


namespace SkyHubTest\unit\Api\EntityInterface\Catalog\Product;

use PHPUnit\Framework\TestCase;
use SkyHub\Api;
use SkyHub\Api\EntityInterface\Catalog\Product\Stock;
use GuzzleHttp\Client;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Handler\MockHandler;
use GuzzleHttp\HandlerStack;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\Psr7\Response;
use SkyHub\Api\Service\ServiceJson;
use SkyHub\Api\Service\ClientBuilderInterface;

class StockTest extends TestCase
{
    /** @var Api */
    protected $api;

    /** @var Stock */
    protected $stock;

    protected function setUp()
    {
        // Create a mock and queue two responses.
        $mock = new MockHandler([
            new Response(200, ['X-Foo' => 'Bar'], ''),
            new Response(202, ['Content-Length' => 0]),
            new RequestException("Error Communicating with Server", new Request('POST', 'test'))
        ]);

        $handler = HandlerStack::create($mock);
        $this->client = new Client(['handler' => $handler]);

        $this->builder = $this->createMock(ClientBuilderInterface::class);
        $this->builder->method('build')->willReturn($this->client);

        $this->service = new ServiceJson('http://www.example.com', [], [], $this->builder);

        $this->api = new Api('anyone@anyone.com', 'anything', null, 'https://api.skyhub.com', $this->service);
        $this->stock = $this->api->productStock()->entityInterface();
    }

    /**
     * @test
     */
    public function isProductStockEntityInterfaceCorrectInstance()
    {
        $this->assertInstanceOf(Stock::class, $this->stock);
    }

    /**
     * @test
     * @depends isProductStockEntityInterfaceCorrectInstance
     */
    public function checkDataToUpdate()
    {
        $sku = 'test';
        $qty = 2;

        $this->stock->setSku($sku);
        $this->stock->setQty($qty);

        $this->assertEquals($sku, $this->stock->getSku());
        $this->assertEquals($qty, $this->stock->getQty());
        return $this->stock;
    }

    /**
     * @test
     * @depends checkDataToUpdate
     */
    public function checkApiUpdate(Stock $stock)
    {
        $this->assertEquals(
            '200',
            $stock->update()->statusCode()
        );
    }
}